apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ${KUBERNETES_NAMESPACE}
  labels:
    app: frontend
    version: ${IMAGE_TAG}
    environment: ${ENVIRONMENT}
spec:
  replicas: ${REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        version: ${IMAGE_TAG}
        environment: ${ENVIRONMENT}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      containers:
      - name: frontend
        image: ${DOCKER_REGISTRY}/frontend:${IMAGE_TAG}
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_APP_ENV
          value: ${ENVIRONMENT}
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: api-url
        - name: NEXT_PUBLIC_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: base-url
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: nextauth-secret
        - name: NEXT_PUBLIC_GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: google-client-id
        - name: NEXT_PUBLIC_RAZORPAY_KEY_ID
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: razorpay-key-id
        - name: RAZORPAY_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: razorpay-key-secret
        - name: NEXT_PUBLIC_GOOGLE_MAPS_API_KEY
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: google-maps-api-key
        - name: NEXT_PUBLIC_GA_MEASUREMENT_ID
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: ga-measurement-id
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: redis-url
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: sentry-dsn
        resources:
          requests:
            memory: ${RESOURCES_REQUESTS_MEMORY}
            cpu: ${RESOURCES_REQUESTS_CPU}
          limits:
            memory: ${RESOURCES_LIMITS_MEMORY}
            cpu: ${RESOURCES_LIMITS_CPU}
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 1001
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - frontend
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: ${KUBERNETES_NAMESPACE}
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: ${KUBERNETES_NAMESPACE}
data:
  api-url: "https://api.${DOMAIN}"
  base-url: "https://${DOMAIN}"
  environment: "${ENVIRONMENT}"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  namespace: ${KUBERNETES_NAMESPACE}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - ${DOMAIN}
    secretName: frontend-tls
  rules:
  - host: ${DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: ${REPLICAS}
  maxReplicas: $((${REPLICAS} * 3))
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: frontend
