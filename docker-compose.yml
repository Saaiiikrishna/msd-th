version: '3.8'

services:
  # ==================== INFRASTRUCTURE SERVICES ====================
  
  # PostgreSQL for User Service
  postgres-user:
    image: postgres:15-alpine
    container_name: postgres-user
    environment:
      POSTGRES_DB: userservice
      POSTGRES_USER: userservice
      POSTGRES_PASSWORD: userservice123
    ports:
      - "5432:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userservice -d userservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msd-network

  # PostgreSQL for Keycloak
  postgres-keycloak:
    image: postgres:15-alpine
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    ports:
      - "5433:5432"
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msd-network

  # PostgreSQL for Payment Service
  postgres-payment:
    image: postgres:15-alpine
    container_name: postgres-payment
    environment:
      POSTGRES_DB: paymentservice
      POSTGRES_USER: paymentservice
      POSTGRES_PASSWORD: paymentservice123
    ports:
      - "5434:5432"
    volumes:
      - postgres_payment_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paymentservice -d paymentservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msd-network

  # PostgreSQL for Treasure Service
  postgres-treasure:
    image: postgres:15-alpine
    container_name: postgres-treasure
    environment:
      POSTGRES_DB: treasureservice
      POSTGRES_USER: treasureservice
      POSTGRES_PASSWORD: treasureservice123
    ports:
      - "5435:5432"
    volumes:
      - postgres_treasure_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U treasureservice -d treasureservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msd-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msd-network

  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:1.15
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - msd-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - msd-network

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - msd-network

  # Kafka Drop (Kafka UI)
  kafka-drop:
    image: obsidiandynamics/kafdrop:3.30.0
    container_name: kafka-drop
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - msd-network

  # Keycloak for authentication
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    ports:
      - "8090:8080"  # External port 8090 to avoid conflict with API Gateway
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    command: start-dev

    networks:
      - msd-network

  # ==================== APPLICATION SERVICES ====================

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: docker
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_CLIENT_ID: auth-service
      KEYCLOAK_CLIENT_SECRET: fallback-secret  # Will be dynamically fetched from Keycloak
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/treasure-hunt
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/treasure-hunt/protocol/openid-connect/certs
      REDIS_HOST: redis
      REDIS_PORT: 6379
      USER_SERVICE_URL: http://user-service:8082/api/user-service/v1
      USER_SERVICE_INTERNAL_API_KEY: $${USER_SERVICE_INTERNAL_API_KEY:-internal-service-key-123}
      # Additional auth-service specific environment variables
      SERVICES_USER_SERVICE_URL: http://user-service:8082
      AUTH_USER_SERVICE_BASE_URL: http://user-service:8082
    ports:
      - "8081:8081"
    depends_on:
      - keycloak
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - msd-network

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      SERVER_PORT: 8082
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres-user
      DB_PORT: 5432
      DB_NAME: userservice
      DB_USER: userservice
      DB_PASS: userservice123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      VAULT_URI: http://vault:8200
      VAULT_TOKEN: myroot
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONSUMER_GROUP: user-service-group
      KAFKA_EVENTS_ENABLED: true
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/treasure-hunt
    ports:
      - "8082:8082"
    depends_on:
      postgres-user:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - msd-network

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      SERVER_PORT: 8083
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres-payment
      DB_PORT: 5432
      DB_NAME: paymentservice
      DB_USER: paymentservice
      DB_PASS: paymentservice123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONSUMER_GROUP: payment-service-group
      RAZORPAY_KEY_ID: rzp_test_fQluXDFtJjH3vV
      RAZORPAY_KEY_SECRET: aBO9FVztNddcnjnoosqVrmHO
      RAZORPAY_WEBHOOK_SECRET: treasure_hunt_webhook_secret_2025
      WEBHOOK_BASE_URL: http://localhost:8083
    ports:
      - "8083:8083"
    depends_on:
      postgres-payment:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - msd-network

  # Treasure Service
  treasure-service:
    build:
      context: ./Treasure
      dockerfile: Dockerfile
    container_name: treasure-service
    environment:
      SERVER_PORT: 8084
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres-treasure
      DB_PORT: 5432
      DB_NAME: treasureservice
      DB_USER: treasureservice
      DB_PASS: treasureservice123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      AUTH_SERVICE_URL: http://auth-service:8081
      USER_SERVICE_URL: http://user-service:8082
      PAYMENT_SERVICE_URL: http://payment-service:8083
    ports:
      - "8084:8084"
    depends_on:
      postgres-treasure:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - msd-network

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
      AUTH_SERVICE_URL: http://auth-service:8081
      USER_SERVICE_URL: http://user-service:8082
      PAYMENT_SERVICE_URL: http://payment-service:8083
      TREASURE_SERVICE_URL: http://treasure-service:8084
      KEYCLOAK_URL: http://keycloak:8080
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - user-service
      - payment-service
      - treasure-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - msd-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: "$${NEXT_PUBLIC_GOOGLE_CLIENT_ID}"
        NEXT_PUBLIC_GOOGLE_PROJECT_ID: "$${NEXT_PUBLIC_GOOGLE_PROJECT_ID}"
        NEXT_PUBLIC_BASE_URL: "http://localhost:3000"
        NEXT_PUBLIC_API_URL: "http://localhost:8080"
        NEXT_PUBLIC_APP_NAME: "Dream Rider"
        NEXT_PUBLIC_APP_SUBTITLE: "MySillyDreams"
    container_name: frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8080
      API_GATEWAY_URL: http://api-gateway:8080
      NEXT_PUBLIC_APP_NAME: "Dream Rider"
      NEXT_PUBLIC_APP_SUBTITLE: "MySillyDreams"
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: "$${NEXT_PUBLIC_GOOGLE_CLIENT_ID}"
      NEXT_PUBLIC_GOOGLE_PROJECT_ID: "$${NEXT_PUBLIC_GOOGLE_PROJECT_ID}"
      NEXT_PUBLIC_BASE_URL: "http://localhost:3000"
      NEXTAUTH_URL: "http://localhost:3000"
      NEXTAUTH_SECRET: "dev-secret-key-change-in-production"
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - msd-network

# ==================== VOLUMES ====================
volumes:
  postgres_user_data:
  postgres_keycloak_data:
  postgres_payment_data:
  postgres_treasure_data:
  redis_data:

# ==================== NETWORKS ====================
networks:
  msd-network:
    driver: bridge
